3==3
q()
oddcount<-function(x) {
k<-0
for(n in x){
if(n%%2==1)k<-(k+1)
}
return(k)
}
oddcount(c(1,9,8,7,5,6,3))
y<-c(1,6,9,8)
y[c(1,4)]
y[2:3]
y[-1]
y[-1:-3]
q()
f
f<-fuction(x,c)return((x+c)^2)
f function(x,c)return((x+c)^2)
function(x,c)return((x+c)^2)
f(1:3,0)
f<-function(x,c)return((x+c)^2)
f(1:4,0)
sqrt(1:9)
q()
x<-c(1,2,3,4,NA,NA)
y<-x(!is.na(x))
y<-x[!is.na(x)]
y
x
z<-(x+1)[!is.na(x)&x>0]
z
y<-c(1,2,3,-4,-8,NA)
z<-(y+1)[!is.na(y)&y>0]
length(z)
z
m<-y[-1:-3]
m
abs(m)
z<-0:9
digits<-as.character(z)
digits
e<-numeric()
e[3]<-17
e
alpha<-c(1,2,3,4,5,6,7,8,9,10)
alpha<-alpha[2,10,by=2]
ap
alpha[seq(2,10,by=2)]
z<-c(12,12,3,5,6,7,86,34,56,78)
even<-z[seq(2,10,by=2)]
even
odd<-z[-(2*1:5)]
odd
state <- c("tas", "sa", "qld", "nsw", "nsw", "nt", "wa", "wa", "qld", "vic", "nsw", "vic", "qld", "qld", "sa", "tas", "sa", "nt", "wa", "vic", "qld", "nsw", "nsw", "wa", "sa", "act", "nsw", "vic", "vic", "act"
)
statef<-factor(state)
statef
 incomes <- c(60, 49, 40, 61, 64, 60, 59, 54, 62, 69, 70, 42, 56, 61, 61, 61, 58, 51, 48, 65, 49, 49, 41, 48, 52, 46, 59, 46, 58, 43) 
tapply(incomes,statef,mean())
tapply(incomes,statef,mean)
tapply(incomes,state,mean)
stderr<-function(x)sqrt(var(x)/length(x))
variance<-tapply(incomes,state,stderr)
variance
q()
x<-data.frame(u=1,v=2,w=3)
u
attach(x)
u
u<v+w
u=v+w
u
x
u
x$u
detach(x)
u
u
x$u
attach(x)
u
x$u
q()
x<-(4,"a",TRUE)
 x<-c(4,"a",TRUE)
class(x)
dir()
read.table(hw1_data.csv)
read.table(hw1_data.csv)
read.table(hw1_data.csv)
q()
q()
stevens=read.csv("stevens.csv")
library(caTools)
set.seed(3000)
spl=sample.split(Stevens$Reverse,0.7)
spl=sample.split(stevens$Reverse,0.7)
Train=subset(stevens,spl==TRUE)
Test=subset(stevens,spl==FALSE)
str(stevens)
library(rpart)
library(rpart.plot)
stevenstree=rpart(Reverse~Issue+Circuit+Petitioner+Respondent+LowerCourt+Unconst,data=Train,method="class",minbucket=25)
prp(stevenstree)
predictcart=predict(stevenstree,newdata=test,type="class")
predictcart=predict(stevenstree,newdata=Test,type="class")
table(Test$Reverse,predictcart)
library(ROCR)
predictroc=predict(stevenstree,Test)
predictroc
pred=prediction(predictroc[,2],Test$Reverse)
perf=performance(pred,"tpr","fpr")
plot(perf)
library(randomForest)
stevensforest=randomForest(Reverse~Issue+Circuit+Respondent+Petitioner+Unconst+LowerCourt,data=Train,ntree=200,nodesize=25)
Train$Reverse=as.factor(Train$Reverse)
Test$Reverse=as.factor(Test$Reverse)
stevensforest=randomForest(Reverse~Issue+Circuit+Respondent+Petitioner+Unconst+LowerCourt,data=Train,ntree=200,nodesize=25)
predictforest=predict(stevensforest,newdata=Test)
table(Test$Reverse,predictforest)
library(caret)
library(e1071)
numfolds=trainControl(method="cv",number=10)
cpgrid=expand.grid(.cp=seq(0.01,.5,.01))
train(Reverse~Issue+Circuit+Respondent+Petitioner+LowerCourt+Unconst,Train,method="rpart",trControl=numfolds,tunegrid=cpgrid)
train(Reverse~Issue+Circuit+Respondent+Petitioner+LowerCourt+Unconst,data=Train,method="rpart",trControl=numfolds,tunegrid=cpgrid)
train(Reverse~Issue+Circuit+Respondent+Petitioner+LowerCourt+Unconst,data=Train,method="rpart",trControl=numfolds,tuneGrid=cpgrid)
stevenstree=rpart(Reverse~Issue+Circuit+Petitioner+Respondent+LowerCourt+Unconst,Train,method="class",cp=0.17)
predictcv=predict(stevenstree,test)
predictcv=predict(stevenstree,Test)
table(Test$Reverse,predictcv)
predictcv=predict(stevenstree,Test,type="class")
table(Test$Reverse,predictcv)
prp(stevenstree)
q()
